# -*- coding: utf-8 -*-
"""TP3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JBKoEXX4N2SApmQ-1Uxng1jKHe4tFxrK
"""

import pandas as pd
import random

data = pd.read_csv('dataFinal.csv')

data

candidates = data.columns

"""Vote à la majorité simple"""

def MajorityRule(cand1,cand2):
  somm_cand1=0
  somm_cand2=0
  for i in range((len(data))):
    if data.iloc[i][cand1] > data.iloc[i][cand2] :
      somm_cand1 +=1
    else:
      somm_cand2 +=1
  if somm_cand1 > somm_cand2:
    print('Candidat élu :',cand1)
    return
  if somm_cand1 < somm_cand2:
    print('Candidat élu :',cand2)
  if somm_cand1 == somm_cand2:
    print('Égalité')
    return
  return

MajorityRule('Candidat 1','Candidat 2')

"""VoteUnTour"""

def VoteUnTour():
  vote_final=[]
  equo=[]
  for j in range(1, len(candidates)):
    sum =0
    for vote in data[candidates[j]]:
        if vote == (len(candidates)-1):
           sum +=1
    vote_final.append((sum,candidates[j]))
  sort_cand=[]
  sort_cand= sorted(vote_final, reverse=True)
  if sort_cand[0][0] > sort_cand[1][0] :
    return print('Candidat élu :', sort_cand[0][1])
  else :
    for j in range(0, len(candidates)-1):
      if sort_cand[j][0]==sort_cand[0][0]:
        equo.append(sort_cand[j][1])
    print('Candidats ex aequo: ',equo)
    print('Candidat élu au sort :',random.choice(equo))        
    return
  return

VoteUnTour()

"""Élection à deux tours"""

def VoteDeuxTour():
  vote_final=[]
  for j in range(1, len(candidates)):
    sum =0
    for vote in data[candidates[j]]:
        if vote == (len(candidates)-1):
           sum +=1
    vote_final.append((sum,candidates[j]))
  total=0
  for i in range(len(vote_final)):
    total+=vote_final[i][0]
  if max(vote_final)[0] > (total/2):
   print('Candidat élu au premier tour:', max(vote_final)[1])
  else:
    sort_cand=[]
    sort_cand= sorted(vote_final, reverse=True)
    sort_cand=sort_cand[0:2]
    cand_final=[]
    cand_final.append(sort_cand[0][1])
    cand_final.append(sort_cand[1][1])
    #print("Candidats au deuxième tour:",cand_final)
    vote_deux=[]
    vote1=0
    vote2=0
    for i in range(len(data)):
      if data.iloc [i] [cand_final[0]]>data.iloc [i] [cand_final[1]]:
        vote1 +=1
      else:
        vote2 +=1
    if vote1 > vote2:
      print('Candidat élu au deuxième tour:', cand_final[0])
    else :
      print('Candidat élu au deuxième tour:', cand_final[1])               
  return

VoteDeuxTour()

"""VoteCondorcet"""

def Majority(cand1,cand2):
  somm_cand1=0
  somm_cand2=0
  for i in range((len(data))):
    if data.iloc[i][cand1] > data.iloc[i][cand2] :
      somm_cand1 +=1
    if data.iloc[i][cand1] < data.iloc[i][cand2] :
      somm_cand2 +=1
    if data.iloc[i][cand1] == data.iloc[i][cand2] :
      somm_cand1 +=1
      somm_cand2 +=1
  if somm_cand1 > somm_cand2:
    return cand1
  if somm_cand1 < somm_cand2:
    return cand2
  if somm_cand1 == somm_cand2:
    return None
  return

def VoteCondorcet():
    for i in  range(1, len(candidates)):
      j=1 
      count=0 
      while ( j < len(candidates)):
        cand1=candidates[i]
        cand2=candidates[j]
        if cand1==cand2:
          j+=1
        else:  
          #print('cand1:',cand1)
          #print('cand2:',cand2)
          if Majority(cand1, cand2)==cand1 :
            j=j+1
            count +=1
            #print(count)
            #print('Win cand1', cand1)
            champion = cand1
            if count==len(candidates)-2:
                return print('Candidat élu avec Condorcet:', champion)          
            continue
          if Majority(cand1, cand2)==cand2:
            #print('Win cand2', cand2)
            champion = cand2
            break
          if Majority(cand1, cand2)==None:
            j+=1
            champion='Aucun candidat'
            #print('Parité')    
    return print('Candidat élu avec Condorcet:', champion)

VoteCondorcet()

"""VoteBorda"""

def VoteBorda():
  cand=[]
  for j in range(1, len(candidates)):
    iter=[]
    tot=0
    for vote in data[candidates[j]]:
      iter.append(vote)
    cand.append((sum(iter),candidates[j]))
  sort_cand=[]
  sort_cand= sorted(cand, reverse=True) 
  if sort_cand[0][0] == sort_cand[1][0]:
     return print('Égalité, pas de candidat élu avec Borda') 
  return print('Candidat élu avec Borda:', max(cand)[1])

VoteBorda()

"""SuperVote"""

def SuperVote():
  VoteUnTour()
  VoteDeuxTour()
  VoteCondorcet()
  VoteBorda()
  return

SuperVote()

